import datetime
import time

import gridfs
import pymongo

from scrapy.pipelines.files import FilesPipeline, logger, FileException
from scrapy.utils.log import failure_to_exc_info
from scrapy.utils.misc import md5sum
from scrapy.utils.request import referer_str
from twisted.internet import defer


class GridFSFilesStorage(object):
    """MongoDB GridFS storage.
    Store files in GridFS and returns their ObjectId.
    Check if file exists based on file guid generated by pipeline"""

    def __init__(self, uri):
        client = pymongo.MongoClient(uri)
        self.db = client.myscrapy
        self.fs = gridfs.GridFS(self.db)

    def persist_file(self, file_guid, buf, info, meta=None, headers=None):
        """Save the file to GridFS and return it's ObjectId"""

        grid_id = self.fs.put(buf, scrapy_guid=file_guid)
        return grid_id

    def stat_file(self, file_guid, info):
        """Check if file exists based on file guid generated by the scrapy pipeline"""

        pdf = self.fs.find_one({'scrapy_guid': file_guid})
        epoch = datetime.datetime.utcfromtimestamp(0)
        last_modified = (pdf.upload_date - epoch).total_seconds()
        checksum = md5sum(pdf)
        return {'last_modified': last_modified, 'checksum': checksum, 'mongo_objectid': pdf._id}


class GridFSFilesPipeline(FilesPipeline):
    """
    An extension of FilesPipeline that store files in MongoDB GridFS.
    Is using a guid to check if the file exists in GridFS and MongoDB ObjectId to reference the file with item.
    FilesPipeline was using a single variable 'path' for reference and identification.
    guid is used in MongoGridFSFilesPipeline because the pipeline needs a unique identifier generated based on file URL.
    MongoGridFSFilesPipeline is using ObjectId to reference the file because it's the primary key.
    """

    @classmethod
    def from_settings(cls, settings):
        """Override to use store_uri = MONGO_URI"""

        store_uri = settings['MONGO_URI']
        return cls(store_uri, settings=settings)

    def _get_store(self, uri):
        """Override to use MongoGridFSFilesStorage as singele storage option"""
        store_cls = GridFSFilesStorage
        return store_cls(uri)

    def media_to_download(self, request, info):
        """Override to include in the returned result mongo object id and file_guid instead of file_path and filename"""

        def _onsuccess(result):
            if not result:
                return  # returning None force download

            last_modified = result.get('last_modified', None)
            if not last_modified:
                return  # returning None force download

            age_seconds = time.time() - last_modified
            age_days = age_seconds / 60 / 60 / 24
            if age_days > self.expires:
                return  # returning None force download

            referer = referer_str(request)
            logger.debug(
                'File (uptodate): Downloaded %(medianame)s from %(request)s '
                'referred in <%(referer)s>',
                {'medianame': self.MEDIA_NAME, 'request': request,
                 'referer': referer},
                extra={'spider': info.spider}
            )
            self.inc_stats(info.spider, 'uptodate')

            checksum = result.get('checksum', None)
            mongo_objectid = result.get('mongo_objectid', None)
            filename = self.filename(request)
            return {'url': request.url, 'file_guid': file_guid, 'checksum': checksum,
                    'mongo_objectid': mongo_objectid, 'filename': filename}

        file_guid = self.file_guid(request, info=info)
        dfd = defer.maybeDeferred(self.store.stat_file, file_guid, info)
        dfd.addCallbacks(_onsuccess, lambda _: None)
        dfd.addErrback(
            lambda f:
            logger.error(self.__class__.__name__ + '.store.stat_file',
                         exc_info=failure_to_exc_info(f),
                         extra={'spider': info.spider})
        )
        return dfd

    def media_downloaded(self, response, request, info):
        """Override to include in the returned result mongo object id and file_guid instead of file_path and filename"""

        referer = referer_str(request)

        if response.status != 200:
            logger.warning(
                'File (code: %(status)s): Error downloading file from '
                '%(request)s referred in <%(referer)s>',
                {'status': response.status,
                 'request': request, 'referer': referer},
                extra={'spider': info.spider}
            )
            raise FileException('download-error')

        if not response.body:
            logger.warning(
                'File (empty-content): Empty file from %(request)s referred '
                'in <%(referer)s>: no-content',
                {'request': request, 'referer': referer},
                extra={'spider': info.spider}
            )
            raise FileException('empty-content')

        status = 'cached' if 'cached' in response.flags else 'downloaded'
        logger.debug(
            'File (%(status)s): Downloaded file from %(request)s referred in '
            '<%(referer)s>',
            {'status': status, 'request': request, 'referer': referer},
            extra={'spider': info.spider}
        )
        self.inc_stats(info.spider, status)

        try:
            file_guid = self.file_guid(request, response=response, info=info)
            checksum, mongo_objectid = self.file_downloaded(response, request, info)
        except FileException as exc:
            logger.warning(
                'File (error): Error processing file from %(request)s '
                'referred in <%(referer)s>: %(errormsg)s',
                {'request': request, 'referer': referer, 'errormsg': str(exc)},
                extra={'spider': info.spider}, exc_info=True
            )
            raise
        except Exception as exc:
            logger.error(
                'File (unknown-error): Error processing file from %(request)s '
                'referred in <%(referer)s>',
                {'request': request, 'referer': referer},
                exc_info=True, extra={'spider': info.spider}
            )
            raise FileException(str(exc))

        filename = self.filename(request)
        return {'url': request.url, 'file_guid': file_guid, 'checksum': checksum, 'mongo_objectid': mongo_objectid,
                "filename": filename}

    def file_downloaded(self, response, request, info):
        """Override to return also the mongo object id along with checksum"""

    def file_guid(self, request, response=None, info=None):
        """Renamed and modify file_path to file_guid. In mongo DB the path to file is mongo id. In FilesPipeline path
        was used as identifier and localization"""

    def filename(self, request):
        """Return the original filename"""
